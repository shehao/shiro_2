<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

        <!-- =========================================================
             Shiro Core Components - Not Spring Specific
             ========================================================= -->
        <!-- Shiro's main business-tier object for web-enabled applications
             (use DefaultSecurityManager instead when there is no web environment)-->
    <!--
        1.自定义realm1 MD5加密
    -->
    <bean id="shiroRealm" class="com.hx.realms.ShiroRealm">
        <!--对用户输入的密码进行加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--加密算法-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!--加密次数-->
                <property name="hashIterations" value="1024"></property>
             </bean>
        </property>

    </bean>
    <!--
        2.自定义realm2 SHA1加密
    -->
    <bean id="secondRealm" class="com.hx.realms.SecondRealm">
        <!--对用户输入的密码进行加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--加密算法-->
                <property name="hashAlgorithmName" value="SHA1"/>
                <!--加密次数-->
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>

    </bean>
    <!--
        多realm执行需要配置一个
    -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!--<property name="realms">
            &lt;!&ndash;此处的realm是有先后顺序的,定义前面的先&ndash;&gt;
            <list>
                <ref bean="shiroRealm"></ref>
                <ref bean="secondRealm"></ref>
            </list>
        </property>-->
        <!--设置验证策略,全部验证成功才算成功!-->
        <!--<property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
        </property>-->
    </bean>

    <!--
        多个realm存在时,如果不指定认证策略默认为AtLastOneSuccessStrategy
    -->


    <!--
        1.配置securityManager
    -->
        <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
            <!--缓存配置-->
           <!-- <property name="cacheManager" ref="cacheManager"/>-->
            <!--==================单个realm配置=========================--><!--单个和多个只需要配置一个-->
            <!--<property name="realm" ref="shiroRealm"/>-->
            <!--==================多个realm配置===================================-->
            <property name="authenticator" ref="authenticator"></property>
            <property name="realms">
                <list>
                    <ref bean="shiroRealm"></ref>
                    <ref bean="secondRealm"></ref>
                </list>

            </property>
        </bean>

        <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
             caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
        <!--<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
            &lt;!&ndash; Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
                 will be creaed with a default config:
                 <property name="cacheManager" ref="ehCacheManager"/> &ndash;&gt;
            &lt;!&ndash; If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
                 a specific Ehcache configuration to be used, specify that here.  If you don't, a default
                 will be used.:
            <property name="cacheManagerConfigFile" value="classpath:some/path/to/ehcache.xml"/> &ndash;&gt;
        </bean>-->

        <!-- =========================================================
             Shiro Spring-specific integration
             ========================================================= -->
        <!-- Post processor that automatically invokes init() and destroy() methods
             for Spring-configured Shiro objects so you don't have to
             1) specify an init-method and destroy-method attributes for every bean
                definition and
             2) even know which Shiro objects require these methods to be
                called. -->
        <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

        <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
             the lifecycleBeanProcessor has run: -->
    <!--
        使用注解,必须在配置了lifecycleBeanPostProcessor后才可以
    -->
        <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
              depends-on="lifecycleBeanPostProcessor"/>
        <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
            <property name="securityManager" ref="securityManager"/>
        </bean>


        <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
             web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
             to wire things with more control as well utilize nice Spring things such as
             PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
        <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
            <property name="securityManager" ref="securityManager"/>
            <property name="loginUrl" value="/login.jsp"/>
            <property name="successUrl" value="/success.jsp"/>
            <property name="unauthorizedUrl" value="/unauth.jsp"/>
            <!--
                自定义的权限集合map
            -->
            <property name="filterChainDefinitionMap" ref="filterChainDefinitionsMap"></property>
           <!-- <property name="filterChainDefinitions">
                <value>
                    /login.jsp=anon
                    /admin/checkLogin=anon
                    /admin.jsp=roles[admin]
                    /user.jsp=roles[user]
                    /** = authc
                </value>
            </property>-->
        </bean>
    <!--
        配置一个bean,该bean实际上是一个map,通过实例工程的模式   自定义map时需要用到下面的两个bean
    -->
    <bean id="filterChainDefinitionsMap" factory-bean="filterChainDefinitionsMapBuilder" factory-method="buildFilterChainDefinitionsMap"></bean>
    <bean id="filterChainDefinitionsMapBuilder" class="com.hx.util.FilterChainDefinitionsMapBuilder"></bean>


    <bean id="shiroService" class="com.hx.services.ShiroService"></bean>


</beans>
